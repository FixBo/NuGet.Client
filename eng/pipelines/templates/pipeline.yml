# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
parameters:
- name: isOfficialBuild
  type: boolean
  default: false
- name: DartLabEnvironment
  displayName: DartLab Environment
  type: string
  default: Production
  values:
  - Production
  - Staging
- name: E2EPart1AgentCleanup
  displayName: Delete or keep E2E Part 1 machine for debugging
  type: string
  default: delete
  values:
  - delete
  - stop
- name: E2EPart2AgentCleanup
  displayName: Delete or keep E2E Part 2 machine for debugging
  type: string
  default: delete
  values:
  - delete
  - stop
- name: ApexAgentCleanup
  displayName: Delete or keep VS Apex test machine for debugging
  type: string
  default: delete
  values:
  - delete
  - stop
- name: NuGetLocalizationType
  displayName: Whether to do production-ready localization (Full), or pseudo-localization, aka PLOC, (Pseudo) for testing.
  type: string
  default: Full
  values:
  - Full
  - Pseudo
- name: RunApexTests
  displayName: Run Apex tests
  type: boolean
  default: true
- name: RunBuildForPublishing
  displayName: Build bits for publishing
  type: boolean
  default: true
- name: RunCrossFrameworkTestsOnWindows
  displayName: Run cross framweork tests on Windows
  type: boolean
  default: true
- name: RunEndToEndTests
  displayName: Run end-to-end tests
  type: boolean
  default: true
- name: RunFunctionalTestsOnWindows
  displayName: Run functional tests on Windows
  type: boolean
  default: true
- name: RunSourceBuild
  displayName: Run source build
  type: boolean
  default: true
- name: RunTestsOnLinux
  displayName: Run tests on Linux
  type: boolean
  default: true
- name: RunTestsOnMac
  displayName: Run tests on Mac
  type: boolean
  default: true
- name: RunMonoTestsOnMac
  displayName: Run Mono tests on Mac
  type: boolean
  default: false
stages:
- stage: Initialize
  jobs:
  - job: GetSemanticVersion
    displayName: Get NuGet.Client semantic version
    timeoutInMinutes: 10
    pool:
      vmImage: windows-latest
    steps:
    - template: /eng/pipelines/templates/Initialize_Build_SemanticVersion.yml@self
  - job: Initialize_Build
    dependsOn: GetSemanticVersion
    timeoutInMinutes: 10
    variables:
      SemanticVersion: $[dependencies.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
      BuildRevision: $[counter(format('{0}.{1}', variables['SemanticVersion'], variables['build.definitionname']), 1)]
    pool:
      vmImage: windows-latest
    steps:
    - template: /eng/pipelines/templates/Initialize_Build.yml@self
- stage: StaticSourceAnalysis
  displayName: Static Source Analysis
  dependsOn: []
  jobs:
  - job: RunStaticSourceAnalysis
    displayName: Run Static Source Analysis
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest
    steps:
    - template: /eng/pipelines/templates/Static_Source_Analysis.yml@self
      parameters:
        isOfficialBuild: ${{ parameters.isOfficialBuild }}
- stage: Build_Insertable
  displayName: Build NuGet inserted into VS and .NET SDK
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_NonRTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetChannelForTests: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannelForTests']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      BuildRTM: "false"
      SemanticVersion: $[stageDependencies.Initialize.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    templateContext:
      mb:
        localization:
          enabled: true
        signing:
          enabled: true
          signType: "$(SigningType)"
        swix:
          enabled: true
        optprof:
          enabled: true
          ShouldSkipOptimize: $(ShouldSkipOptimize)
          AccessToken: $(System.AccessToken)
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish buildinfo.json as an artifact'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        targetPath: '$(Build.Repository.LocalPath)\artifacts\buildinfo.json'
        artifactName: 'BuildInfo'
      - output: pipelineArtifact
        displayName: 'Publish NuGet.CommandLine.Test as artifact'
        condition: and(succeeded(),eq(variables['BuildRTM'], 'false'))
        targetPath: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net472"
        artifactName: "NuGet.CommandLine.Test"
      - output: pipelineArtifact
        displayName: 'Publish nupkgs'
        condition: and(succeeded(), or(eq(variables['IsOfficialBuild'], 'true'), eq(variables['BuildRTM'], 'true')))
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)"
        artifactName: "nupkgs - $(RtmLabel)"
      - output: pipelineArtifact
        displayName: 'Publish BootstrapperInfo.json as a build artifact'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        targetPath: $(Build.StagingDirectory)\MicroBuild\Output
        artifactName: MicroBuildOutputs
      - output: artifactsDrop
        displayName: 'Publish the .runsettings files to artifact services'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
        sourcePath: 'artifacts\RunSettings'
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: 'DropMetadata-RunSettings'
      - output: artifactsDrop
        displayName: 'OptProfV2:  publish profiling inputs to artifact services'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
        sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: 'DropMetadata-ProfilingInputs'
      - output: pipelineArtifact
        displayName: 'Publish NuGet.exe VSIX and EndToEnd.zip as artifact'
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
        artifactName: "$(VsixPublishDir)"
      - output: pipelineArtifact
        displayName: 'Publish localizationArtifacts artifact'
        condition: and(eq(variables['BuildRTM'], 'false'), or(eq(variables['OverridePublishLocalizationArtifact'], 'true'), and(succeededOrFailed(), eq(variables['IsOfficialBuild'], 'true'))))
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\localizationArtifacts\\"
        artifactName: "localizationArtifacts"
      - output: pipelineArtifact
        displayName: 'Publish symbols as pipeline artifacts'
        condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
        artifactName: "symbols - $(RtmLabel)"
      - output: artifactsDrop
        displayName: 'Upload VSTS Drop'
        condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'
        sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: "DropMetadata-Product"
      - output: pipelineArtifact
        displayName: 'LocValidation: Publish Logs as an artifact'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        artifactName: LocValidationLogs
        targetPath: "$(Build.Repository.LocalPath)\\logs\\BuildValidatorLogs"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)\binlog
    steps:
    - template: /eng/pipelines/templates/Build_and_UnitTest.yml@self
      parameters:
        BuildRTM: false
        NuGetLocalizationType: ${{ parameters.NuGetLocalizationType }}
- stage: Build_For_Publishing
  displayName: Build NuGet published to nuget.org
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_RTM
    condition: "and(succeeded(), ne(variables['RunBuildForPublishing'], 'false'))"
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetChannelForTests: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannelForTests']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      BuildRTM: "true"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    templateContext:
      outputs:
      - localization:
          enabled: true
      - signing:
          enabled: true
          signType: "$(SigningType)"
      - swix:
          enabled: true
      - optprof:
          enabled: true
          ShouldSkipOptimize: $(ShouldSkipOptimize)
          AccessToken: $(System.AccessToken)
      - output: pipelineArtifact
        displayName: 'Publish buildinfo.json as an artifact'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        targetPath: '$(Build.Repository.LocalPath)\artifacts\buildinfo.json'
        artifactName: 'BuildInfo'
      - output: pipelineArtifact
        displayName: 'Publish NuGet.CommandLine.Test as artifact'
        condition: and(succeeded(),eq(variables['BuildRTM'], 'false'))
        targetPath: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net472"
        artifactName: "NuGet.CommandLine.Test"
      - output: pipelineArtifact
        displayName: 'Publish nupkgs'
        condition: and(succeeded(), or(eq(variables['IsOfficialBuild'], 'true'), eq(variables['BuildRTM'], 'true')))
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)"
        artifactName: "nupkgs - $(RtmLabel)"
      - output: pipelineArtifact
        displayName: 'Publish BootstrapperInfo.json as a build artifact'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        targetPath: $(Build.StagingDirectory)\MicroBuild\Output
        artifactName: MicroBuildOutputs
      - output: artifactsDrop
        displayName: 'Publish the .runsettings files to artifact services'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
        sourcePath: 'artifacts\RunSettings'
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: 'DropMetadata-RunSettings'
      - output: artifactsDrop
        displayName: 'OptProfV2:  publish profiling inputs to artifact services'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
        sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: 'DropMetadata-ProfilingInputs'
      - output: pipelineArtifact
        displayName: 'Publish NuGet.exe VSIX and EndToEnd.zip as artifact'
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
        artifactName: "$(VsixPublishDir)"
      - output: pipelineArtifact
        displayName: 'Publish localizationArtifacts artifact'
        condition: and(eq(variables['BuildRTM'], 'false'), or(eq(variables['OverridePublishLocalizationArtifact'], 'true'), and(succeededOrFailed(), eq(variables['IsOfficialBuild'], 'true'))))
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\localizationArtifacts\\"
        artifactName: "localizationArtifacts"
      - output: pipelineArtifact
        displayName: 'Publish symbols as pipeline artifacts'
        condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
        artifactName: "symbols - $(RtmLabel)"
      - output: artifactsDrop
        displayName: 'Upload VSTS Drop'
        condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'
        sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: "DropMetadata-Product"
      - output: pipelineArtifact
        displayName: 'LocValidation: Publish Logs as an artifact'
        condition: and(succeeded(), eq(variables['BuildRTM'], 'false'))
        artifactName: LocValidationLogs
        targetPath: "$(Build.Repository.LocalPath)\\logs\\BuildValidatorLogs"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)\binlog
    steps:
    - template: /eng/pipelines/templates/Build_and_UnitTest.yml@self
      parameters:
        BuildRTM: true
        NuGetLocalizationType: Full
  - job: Validate_Publishing_Artifacts
    condition: "and(succeeded(), ne(variables['RunBuildForPublishing'], 'false'))"
    displayName: 'Validate Publishing build artifacts'
    dependsOn: Build_and_UnitTest_RTM
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest
    steps:
    - template: /eng/pipelines/templates/Validate_Build_Output.yml@self
      parameters:
        isOfficialBuild: ${{ parameters.isOfficialBuild }}
- stage: Source_Build
  dependsOn: Initialize
  jobs:
  - job: Build_Source_Build
    displayName: "Source Build"
    condition: "and(succeeded(), ne(variables['RunSourceBuild'], 'false'))"
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      BuildRTM: "false"
      DOTNET_NUGET_SIGNATURE_VERIFICATION: true
    pool:
      vmImage: ubuntu-latest
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Upload source-build log'
        condition: or(failed(), eq(variables['System.debug'], 'true'))
        targetPath: "artifacts/sb/log/source-build.binlog"
        artifactName: "Source-build log"
    steps:
    - template: /eng/pipelines/templates/Source_Build.yml@self
- stage: Tests
  displayName: "Run Unit and Functional Tests"
  dependsOn: Initialize
  jobs:
  - job: Functional_Tests_On_Windows
    displayName: "Windows FunctionalTests"
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      MSBuildEnableWorkloadResolver: false
    condition: "and(succeeded(), ne(variables['RunFunctionalTestsOnWindows'], 'false'))"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    strategy:
      matrix:
        IsDesktop:
          SkipCoreAssemblies: "true"
        IsCore:
          SkipDesktopAssemblies: "true"
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Test Freeze Dump'
        condition: or(failed(), canceled())
        targetPath: "$(Build.Repository.LocalPath)/build/TestResults"
        artifactName: "$(Agent.JobName)"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)\binlog
    steps:
    - template: /eng/pipelines/templates/Functional_Tests_On_Windows.yml@self
  - job: Tests_On_Linux
    displayName: "Linux"
    timeoutInMinutes: 45
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      MSBUILDDISABLENODEREUSE: 1
      MSBuildEnableWorkloadResolver: false
      DOTNET_NUGET_SIGNATURE_VERIFICATION: true
    condition: "and(succeeded(), ne(variables['RunTestsOnLinux'], 'false'))"
    pool:
      vmImage: ubuntu-latest
    strategy:
      matrix:
        UnitTests:
          TestRunDisplayName: "Unit Tests"
          TestRunCommandLineArguments: "--unit-tests"
        FunctionalTests:
          TestRunDisplayName: "Functional Tests"
          TestRunCommandLineArguments: "--functional-tests"
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Test Freeze Dump'
        condition: or(failed(), canceled())
        targetPath: "$(Build.Repository.LocalPath)/build/TestResults"
        artifactName: "$(Agent.JobName)"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(TestRunDisplayName) On Linux - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)/binlog
    steps:
    - template: /eng/pipelines/templates/Tests_On_Linux.yml@self
  - job: Tests_On_Mac
    displayName: "Mac"
    timeoutInMinutes: 45
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      MSBUILDDISABLENODEREUSE: 1
      MSBuildEnableWorkloadResolver: false
    condition: "and(succeeded(), ne(variables['RunTestsOnMac'], 'false'))"
    pool:
      vmImage: macos-latest
    strategy:
      matrix:
        UnitTests:
          TestRunDisplayName: "Unit Tests"
          TestRunCommandLineArguments: "--unit-tests"
        FunctionalTests:
          TestRunDisplayName: "Functional Tests"
          TestRunCommandLineArguments: "--functional-tests"
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Test Freeze Dump'
        condition: or(failed(), canceled())
        targetPath: "$(Build.Repository.LocalPath)/build/TestResults"
        artifactName: "$(Agent.JobName)"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(TestRunDisplayName) On Mac - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)/binlog
    steps:
    - template: /eng/pipelines/templates/Tests_On_Mac.yml@self
  - job: CrossFramework_Tests_On_Windows
    displayName: "Windows CrossFrameworkTests"
    condition: "and(succeeded(), ne(variables['RunCrossFrameworkTestsOnWindows'], 'false'))"
    timeoutInMinutes: 30
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    pool:
      vmImage: windows-latest
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Test Freeze Dump'
        condition: or(failed(), canceled())
        targetPath: "$(Build.Repository.LocalPath)/build/TestResults"
        artifactName: "$(Agent.JobName)"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)\binlog
    steps:
    - template: /eng/pipelines/templates/CrossFramework_Tests_On_Windows.yml@self
- stage: MacTests
  displayName: "Mac Mono Tests"
  dependsOn:
  - Initialize
  - Build_Insertable
  jobs:
  - job: MonoTests_On_Mac
    condition: "and(succeeded(), ne(variables['RunMonoTestsOnMac'], 'false'))"
    timeoutInMinutes: 90
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      MSBuildEnableWorkloadResolver: false
      TestRunDisplayName: "Mono Tests"
      TestRunCommandLineArguments: "--mono-tests"
    pool:
      vmImage: macos-latest
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Test Freeze Dump'
        condition: or(failed(), canceled())
        targetPath: "$(Build.Repository.LocalPath)/build/TestResults"
        artifactName: "$(Agent.JobName)"
      - output: pipelineArtifact
        displayName: 'Publish binlogs'
        condition: " or(failed(), eq(variables['System.debug'], 'true')) "
        artifactName: binlog - $(TestRunDisplayName) On Mac - Attempt $(System.JobAttempt)
        targetPath: $(Build.StagingDirectory)/binlog
    steps:
    - template: /eng/pipelines/templates/Tests_On_Mac.yml@self
- template: /eng/pipelines/templates/End_To_End_Tests_On_Windows.yml@self
  parameters:
    stageName: VS_EndToEnd_Part1
    stageDisplayName: Part 1
    condition: "and(succeeded(), ne(variables['RunEndToEndTests'], 'false'))"
    dependsOn:
    - Initialize
    - Build_Insertable
    testExecutionJobTimeoutInMinutes: 100
    bootstrapperUrl: $(VsBootstrapperUrl)
    baseBuildDrop: $(VsBaseBuildDrop)
    runSettingsURI: https://vsdrop.microsoft.com/file/v1/RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId);NuGet.Tests.Apex.runsettings
    DartLabEnvironment: ${{parameters.DartLabEnvironment}}
    variables:
    - name: VsBootstrapperUrl
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['vsbootstrapper.bootstrapperUrl']]
    - name: VsBaseBuildDrop
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['setbasebuilddrop.BaseBuildDrop']]
    - name: QBuildSessionId
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['setcloudbuildsessionid.QBuildSessionId']]
    - name: GitHubStatusName
      value: End_To_End_Tests_On_Windows Part1
    QBuildSessionId: $(QBuildSessionId)
    part: "InstallPackageTest.ps1,UninstallPackageTest.ps1,UpdatePackageTest.ps1"
    testMachineCleanUpStrategy: ${{parameters.E2EPart1AgentCleanup}}
- template: /eng/pipelines/templates/End_To_End_Tests_On_Windows.yml@self
  parameters:
    stageName: VS_EndToEnd_Part2
    stageDisplayName: Part 2
    condition: "and(succeeded(), ne(variables['RunEndToEndTests'], 'false'))"
    dependsOn:
    - Initialize
    - Build_Insertable
    testExecutionJobTimeoutInMinutes: 100
    bootstrapperUrl: $(VsBootstrapperUrl)
    baseBuildDrop: $(VsBaseBuildDrop)
    runSettingsURI: https://vsdrop.microsoft.com/file/v1/RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId);NuGet.Tests.Apex.runsettings
    DartLabEnvironment: ${{parameters.DartLabEnvironment}}
    variables:
    - name: VsBootstrapperUrl
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['vsbootstrapper.bootstrapperUrl']]
    - name: VsBaseBuildDrop
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['setbasebuilddrop.BaseBuildDrop']]
    - name: QBuildSessionId
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['setcloudbuildsessionid.QBuildSessionId']]
    - name: GitHubStatusName
      value: End_To_End_Tests_On_Windows Part2
    QBuildSessionId: $(QBuildSessionId)
    part: "A-TopDownloadedPackages.ps1,BuildIntegratedTest.ps1,ExecuteInitScriptTest.ps1,FindPackageTest.ps1,GetPackageTest.ps1,GetProjectTest.ps1,LegacyPackageRefProjectTest.ps1,NativeProjectTest.ps1,NetCoreProjectTest.ps1,PackTest.ps1,ProjectRetargeting.ps1,ServicesTest.ps1,Settings.ps1,SyncPackageTest.ps1,TabExpansionTest.ps1,UniversalWindowsProjectTest.ps1"
    testMachineCleanUpStrategy: ${{parameters.E2EPart2AgentCleanup}}
- template: /eng/pipelines/templates/Apex_Tests_On_Windows.yml@self
  parameters:
    condition: "and(succeeded(), ne(variables['RunApexTests'], 'false'))"
    dependsOn:
    - Initialize
    - Build_Insertable
    variables:
    - name: VsBootstrapperUrl
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['vsbootstrapper.bootstrapperUrl']]
    - name: VsBaseBuildDrop
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['setbasebuilddrop.BaseBuildDrop']]
    - name: QBuildSessionId
      value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['setcloudbuildsessionid.QBuildSessionId']]
    - name: GitHubStatusName
      value: Apex Tests On Windows
    isOfficialBuild: ${{parameters.isOfficialBuild}}
    runSettingsURI: https://vsdrop.microsoft.com/file/v1/RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId);NuGet.Tests.Apex.runsettings
    dartLabEnvironment: ${{parameters.DartLabEnvironment}}
    testExecutionJobTimeoutInMinutes: 150
    bootstrapperUrl: $(VsBootstrapperUrl)
    baseBuildDrop: $(VsBaseBuildDrop)
    QBuildSessionId: $(QBuildSessionId)
    testMachineCleanUpStrategy: ${{parameters.ApexAgentCleanup}}