parameters:
- name: isOfficialBuild
  type: boolean
  default: false
- name: NuGetLocalizationType
  displayName: Whether to do production-ready localization (Full), or pseudo-localization, aka PLOC, (Pseudo) for testing.
  type: string
  default: Full
  values:
  - Full
  - Pseudo
- name: RunBuildForPublishing
  displayName: Build bits for publishing
  type: boolean
  default: true
- name: RunCrossFrameworkTestsOnWindows
  displayName: Run cross framweork tests on Windows
  type: boolean
  default: true
- name: RunFunctionalTestsOnWindows
  displayName: Run functional tests on Windows
  type: boolean
  default: true
- name: RunSourceBuild
  displayName: Run source build
  type: boolean
  default: true
- name: RunTestsOnLinux
  displayName: Run tests on Linux
  type: boolean
  default: true
- name: RunTestsOnMac
  displayName: Run tests on Mac
  type: boolean
  default: true
- name: RunMonoTestsOnMac
  displayName: Run Mono tests on Mac
  type: boolean
  default: false

stages:
- stage: Initialize
  jobs:
  - job: GetSemanticVersion
    displayName: Get NuGet.Client semantic version
    timeoutInMinutes: 10
    pool:
      vmImage: windows-latest
    steps:
    - template: Initialize_Build_SemanticVersion.yml

  - job: Initialize_Build
    dependsOn: GetSemanticVersion
    timeoutInMinutes: 10
    variables:
      SemanticVersion: $[dependencies.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
      BuildRevision: $[counter(format('{0}.{1}', variables['SemanticVersion'], variables['build.definitionname']), 1)]
    pool:
      vmImage: windows-latest
    steps:
    - template: Initialize_Build.yml

- stage: StaticSourceAnalysis
  displayName: Static Source Analysis
  dependsOn: []
  jobs:
  - job: RunStaticSourceAnalysis
    displayName: Run Static Source Analysis
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest
    steps:
    - template: Static_Source_Analysis.yml
      parameters:
        isOfficialBuild: ${{ parameters.isOfficialBuild }}

- stage: Build_Insertable
  displayName: Build NuGet inserted into VS and .NET SDK
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_NonRTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetChannelForTests: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannelForTests']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      BuildRTM: "false"
      SemanticVersion: $[stageDependencies.Initialize.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: Build_and_UnitTest.yml
      parameters:
        BuildRTM: false
        NuGetLocalizationType: ${{ parameters.NuGetLocalizationType }}

- stage: Build_For_Publishing
  displayName: Build NuGet published to nuget.org
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_RTM
    condition: "and(succeeded(), ne(variables['RunBuildForPublishing'], 'false'))"
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetChannelForTests: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannelForTests']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      BuildRTM: "true"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: Build_and_UnitTest.yml
      parameters:
        BuildRTM: true
        NuGetLocalizationType: Full
  - job: Validate_Publishing_Artifacts
    condition: "and(succeeded(), ne(variables['RunBuildForPublishing'], 'false'))"
    displayName: 'Validate Publishing build artifacts'
    dependsOn: Build_and_UnitTest_RTM
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest
    steps:
    - template: Validate_Build_Output.yml
      parameters:
        isOfficialBuild: ${{ parameters.isOfficialBuild }}

- stage: Source_Build
  dependsOn: Initialize
  jobs:
  - job: Build_Source_Build
    displayName: "Source Build"
    condition: "and(succeeded(), ne(variables['RunSourceBuild'], 'false'))"
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      BuildRTM: "false"
      DOTNET_NUGET_SIGNATURE_VERIFICATION: true
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: Source_Build.yml

- stage: Tests
  displayName: "Run Unit and Functional Tests"
  dependsOn: Initialize
  jobs:
  - job: Functional_Tests_On_Windows
    displayName: "Windows FunctionalTests"
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
       # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
      MSBuildEnableWorkloadResolver: false
    condition: "and(succeeded(), ne(variables['RunFunctionalTestsOnWindows'], 'false'))"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    strategy:
      matrix:
        IsDesktop:
          SkipCoreAssemblies: "true"
        IsCore:
          SkipDesktopAssemblies: "true"
    steps:
    - template: Functional_Tests_On_Windows.yml

  - job: Tests_On_Linux
    displayName: "Linux"
    timeoutInMinutes: 45
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      MSBUILDDISABLENODEREUSE: 1
      # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
      MSBuildEnableWorkloadResolver: false
      DOTNET_NUGET_SIGNATURE_VERIFICATION: true
    condition: "and(succeeded(), ne(variables['RunTestsOnLinux'], 'false'))"
    pool:
      vmImage: ubuntu-latest
    strategy:
      matrix:
        UnitTests:
          TestRunDisplayName: "Unit Tests"
          TestRunCommandLineArguments: "--unit-tests"
        FunctionalTests:
          TestRunDisplayName: "Functional Tests"
          TestRunCommandLineArguments: "--functional-tests"
    steps:
    - template: Tests_On_Linux.yml

  - job: Tests_On_Mac
    displayName: "Mac"
    timeoutInMinutes: 45
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      MSBUILDDISABLENODEREUSE: 1
      # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
      MSBuildEnableWorkloadResolver: false
    condition: "and(succeeded(), ne(variables['RunTestsOnMac'], 'false'))"
    pool:
      vmImage: macos-latest
    strategy:
      matrix:
        UnitTests:
          TestRunDisplayName: "Unit Tests"
          TestRunCommandLineArguments: "--unit-tests"
        FunctionalTests:
          TestRunDisplayName: "Functional Tests"
          TestRunCommandLineArguments: "--functional-tests"
    steps:
    - template: Tests_On_Mac.yml

  - job: CrossFramework_Tests_On_Windows
    displayName: "Windows CrossFrameworkTests"
    condition: "and(succeeded(), ne(variables['RunCrossFrameworkTestsOnWindows'], 'false'))"
    timeoutInMinutes: 30
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    pool:
      vmImage: windows-latest
    steps:
    - template: CrossFramework_Tests_On_Windows.yml

- stage: MacTests
  displayName: "Mac Mono Tests"
  dependsOn:
  - Initialize
  - Build_Insertable
  jobs:
  - job: MonoTests_On_Mac
    condition: "and(succeeded(), ne(variables['RunMonoTestsOnMac'], 'false'))"
    timeoutInMinutes: 90
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
      MSBuildEnableWorkloadResolver: false
      TestRunDisplayName: "Mono Tests"
      TestRunCommandLineArguments: "--mono-tests"
    pool:
      vmImage: macos-latest
    steps:
    - template: Tests_On_Mac.yml
    